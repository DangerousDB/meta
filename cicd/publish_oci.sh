#!/bin/env bash

# Check if the jq command is available
if ! command -v jq > /dev/null; then
  echo "Error: jq command not found. Please install jq and try again."
  exit 1
fi

# Check if a metadata.json file that was generated by the build
ZOPEN_IMAGE_CONTAINERFILE_NAME="Containerfile"
ZOPEN_PODMAN_BINARY="podman"

# Parse the metadata.json file and extract the necessary information
PRODUCT_NAME=$(jq -r '.product.name' metadata.json)
PRODUCT_PAX=$(jq -r '.product.pax' metadata.json)
PRODUCT_VERSION=$(jq -r '.product.version' metadata.json)
PRODUCT_RELEASE=$(jq -r '.product.release' metadata.json)
PRODUCT_SUMMARY=$(jq -r '.product.summary' metadata.json)
PRODUCT_DESCRIPTION=$(jq -r '.product.description' metadata.json)

if [ ! -f "$PRODUCT_PAX" ]; then
  echo "$PRODUCT_PAX does not exist"
  exit 1
fi

DIR_NAME=${PRODUCT_PAX%%.pax.Z}
DIR_NAME=$(echo "$DIR_NAME" | sed -e "s/\.202[0-9]*_[0-9]*\.zos/.zos/g" -e "s/\.zos//g")

tar -xvf $PRODUCT_PAX

if [ ! -d "${DIR_NAME}" ]; then
  echo "$DIR_NAME directory does not exist. $PRODUCT_PAX may not have been extracted properly"
  exit 1
fi


# Get pax.Z as input
generateOCI()
{
  echo "Generating OCI Image"

  containerfilecontents="
FROM scratch
LABEL name=\"${PRODUCT_NAME}\"
LABEL version=\"${PRODUCT_VERSION}\"
LABEL release=\"${PRODUCT_RELEASE}\"
LABEL description=\"${PRODUCT_DESCRIPTION}\"
LABEL specification=2.0.0
LABEL summary=\"${PRODUCT_SUMMARY}\"
LABEL community_unsupported=true
LABEL vendor=\"ZOSOpenTools\""


  mkdir -p ".zpm"
  cat "${DIR_NAME}/setup.sh" | sed -e "s#\. ./.env#cd \$INSTALL_DIR; . ./.env; cd -#" -e "s#\${root}/setup.sh#\${root}/.env/install.sh#"  > .zpm/install.sh
  cp "${DIR_NAME}/.env" .zpm/.env

  if [ -f "${ZOPEN_IMAGE_CONTAINERFILE_NAME}" ]; then
    rm -f "${ZOPEN_IMAGE_CONTAINERFILE_NAME}"
  fi
  echo "Generating ${ZOPEN_IMAGE_CONTAINERFILE_NAME}"
  containerfilecontents="${containerfilecontents}\nCOPY $PRODUCT_PAX $PRODUCT_PAX"
  containerfilecontents="${containerfilecontents}\nCOPY .zpm .zpm"

  echo -e "$containerfilecontents" > "${ZOPEN_IMAGE_CONTAINERFILE_NAME}"

  echo "Building OCI Artifact"
  set -x
  output=$("${ZOPEN_PODMAN_BINARY}" build -f "${ZOPEN_IMAGE_CONTAINERFILE_NAME}")
  if [ $? -gt 0 ]; then
    exit 4;
  fi
  buildId=$(echo "$output" | tail -1)

  echo "Pushing OCI Artifact"
  "${ZOPEN_PODMAN_BINARY}" push $buildId  "$ZOPEN_IMAGE_REGISTRY/zosopentools/${PRODUCT_NAME}:${PRODUCT_VERSION}"
  if [ $? -gt 0 ]; then
    exit 4;
  fi
}

if [ -z $ZOPEN_IMAGE_REGISTRY ]; then
  echo "Environment variable ZOPEN_IMAGE_REGISTRY is needed to push an OCI image"
  exit 4;
fi
if [ -z $ZOPEN_IMAGE_REGISTRY_ID ]; then
  echo "Environment variable ZOPEN_IMAGE_REGISTRY_ID is needed to push an OCI image"
  exit 4;
fi
if [ -z $ZOPEN_IMAGE_REGISTRY_KEY_FILE ] || [ ! -r $ZOPEN_IMAGE_REGISTRY_KEY_FILE ]; then
  echo "Environment variable ZOPEN_IMAGE_REGISTRY_KEY_FILE is needed to push an OCI image"
  exit 4;
fi
if [ -z "$(command -v ${ZOPEN_PODMAN_BINARY})" ]; then
  echo "${ZOPEN_PODMAN_BINARY} is not present on your system"
  exit 4
fi

# try logging in first to make sure we're ok
cat $ZOPEN_IMAGE_REGISTRY_KEY_FILE | "${ZOPEN_PODMAN_BINARY}" login $ZOPEN_IMAGE_REGISTRY -u $ZOPEN_IMAGE_REGISTRY_ID --password-stdin

generateOCI
