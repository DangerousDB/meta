#!/bin/sh
# Removal utility for z/OS Open Tools - https://github.com/ZOSOpenTools
#
# All zopen-* scripts MUST start with this code to maintain consistency
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source" >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself
checkWritable

printHelp(){
cat << HELPDOC
zopen remove is a utility to remove installed z/OS Open Tools packages

Usage: zopen remove [OPTION] [PACKAGES]

Options:
  -p, --purge       remove package, the versioned directory and any 
                    cached file
      --version     display the program version
  -v, --verbose     run in verbose mode
  -h,-?, --help     display this help and exit

Examples:
  zopen remove foo bar
                    remove packages foo and bar if installed
  zopen remove --purge foo
                    remove package foo, it's versioned directory within
                    the <zopenroot>/usr/local/zopen/foo file structure
                    and files in the cache 

Report bugs at https://github.com/ZOSOpenTools/meta/issues .

HELPDOC
}

removePackages(){
  pkglist=$*

  echo "$pkglist" | xargs | tr ' ' '\n' | sort | while read pkg; do
    printHeader "Removing package: $pkg"
    printInfo "- Checking status of package '$pkg'"
    if [ ! -f "$ZOPEN_PKGINSTALL/$pkg/$pkg/.active" ]; then 
      printInfo "${NC}${YELLOW}Package '$pkg' is not installed${NC}"
    else
      printInfo "- Package installed, unmeshing from system"
      version="unknown"
      if [ -e "${ZOPEN_PKGINSTALL}/${pkg}/$pkg/.releaseinfo" ]; then
        version=$(cat "${ZOPEN_PKGINSTALL}/${pkg}/$pkg/.releaseinfo")
      fi

      if [ -e "$ZOPEN_PKGINSTALL/$pkg/$pkg" ]; then
        deref=$(cd "$ZOPEN_PKGINSTALL/$pkg/$pkg" && pwd -P | awk -F/ '{ print $(NF)}')
        installedlinksfile="$ZOPEN_PKGINSTALL/$pkg/$deref/.links"
        if $purge; then
          printInfo "- Purging package"
          printVerbose "Checking if we are currently in a directory that is to be purged"
          [ "${PWD##$ZOPEN_PKGINSTALL/$pkg/$pkg}" != "$PWD" ] && cd $ZOPEN_PKGINSTALL
          rm -rf "$(cd "$ZOPEN_PKGINSTALL/$pkg/$pkg" && pwd -P)"
          syslog "$ZOPEN_LOG_PATH/audit.log" "$LOG_A" "$CAT_PACKAGE,$CAT_REMOVE" "REMOVE" "removePackage" "Purging package:'${pkg};version:$version;"
        else
          printInfo "- Removing metadata file to mark uninstall"
          rm -f "$ZOPEN_PKGINSTALL/$pkg/$pkg/.active"
          printInfo "- Breaking link from current to versioned"
          rm -f "$ZOPEN_PKGINSTALL/$pkg/$pkg"
        fi
        printVerbose "Main symlink removed, removing dangling symlinks"
        unsymlinkFromSystem "$pkg" "$ZOPEN_ROOTFS" "$installedlinksfile"
      fi

      printInfo "- Removing profiled entry"
      [ -d "$ZOPEN_ROOTFS/etc/profiled/$pkg" ] && rm -rf "$ZOPEN_ROOTFS/etc/profiled/$pkg"

      syslog "$ZOPEN_LOG_PATH/audit.log" "$LOG_A" "$CAT_PACKAGE,$CAT_REMOVE" "REMOVE" "removePackage" "Removed package:'${pkg};version:$version;"
      printInfo "${NC}${GREEN}Successfully removed: $pkg${NC}"
    fi
  done
}

# Main code start here
verbose=false
debug=false
purge=false
chosenRepos=""
while [ $# -gt 0 ]; do
  case "$1" in
    "-p" | "--purge")
      purge=true
      ;;
    "-h" | "--help" | "-?")
      printHelp
      exit 0
      ;;
    "--version")
      zopen --version "$ME"
      exit 0
      ;;
    "-v" | "--verbose")
      verbose=true
      ;;
    "--debug")
      verbose=true
      debug=true
      ;;
    *)
      chosenRepos="$chosenRepos $1";
      ;;
  esac
  shift;
done

[ -n "$chosenRepos" ] || printError "No packages selected for removal" 
mutexReq "zopen" "zopen"
removePackages "$chosenRepos"
mutexFree "zopen"
